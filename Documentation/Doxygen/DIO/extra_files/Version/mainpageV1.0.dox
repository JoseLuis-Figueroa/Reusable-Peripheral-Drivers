/**
 * @mainpage Digital Input/Output Reusable Driver
 *
 * @section intro Introduction
 * This project is a personal endeavor focused on developing reusable firmware for microcontroller platforms. The goal is to create a modular and efficient GPIO (called DIO) reusable driver that can be easily adapted to various microcontrollers.
 *
 * @section version Version Log
 * - [Version 1.0] - Initial release
 *
 * @section architecture Software Architecture Overview
 * The software architecture follows a layered approach. This design pattern separates low-level code (drivers or HALs), and application-specific code. A layered architecture promotes reusability and simplifies the portability between different applications or microcontrollers.
 * The layered architecture can be seen in figure 1 and contains a driver and application layer operating on the hardware.
 * 
 * <center>
 * <table>
 *   <tr>
 *     <td style="background-color: #eaf2ff; text-align: center;">Application Code</td>
 *   </tr>
 *   <tr>
 *     <td style="background-color: #e8f8e8; text-align: center;">Drivers</td>
 *   </tr>
 *   <tr>
 *     <td style="background-color: #fffbe6; text-align: center;">Hardware</td>
 *   </tr>
 * </table>
 * Figure 1. Two-Layer Software Architecture.
 * </center>
 * 
 * The driver layer includes all the code (drivers) necessary to get the microcontroller and any other associated board hardware, such as sensors, buttons, and so forth, running. 
 * The application code (main) contains no driver code but has access to the low-level hardware through a driver-layer interface that hides the hardware details from the application developer but still allows them to perform a useful function.
 *
 * @section coding-standards Coding Standards
 * This project is developed as bare-metal firmware and adheres to industry-standard coding practices, following the MISRA-C guidelines. This includes consistent naming conventions, code formatting, and best practices for code organization and documentation. 
 *
 * @section description Project Description
 * The main code consists of configuring the user button (PC13 pin) as an input. When pressed, the button turns on the embedded led (PA5) on the board and turns off the yellow led (PB0 pin) by writing directly to the ORD register. 
 * Conversely, when the button is released, the embedded led is turned off, and the yellow led is turned on. The red led (PA0 pin) is set to toggle, although this behavior may not be apparent as a delay is not currently implemented (it will be implemented later), but it can be seen in debug mode. 
 * Additionally, the value of PC13 is obtained by reading directly from the IDR register, and if the user button is pressed, a corresponding message is printed on the console.
 *
 * @section requirements Project Requirements
 * The project aims to meet the following requirements:
 * - Provide a set of reusable functions microcontroller GPIO. 
 * - Maintain portability across different microcontroller platforms.
 * - Follow industry-standard coding practices and guidelines.
 *
 * @section tools Tools
 * The current tooling used for this project includes:
 * - Development Board: Nucleo-F401RE
 * - IDE/Debugger: Visual Studio Code (PlatformIO extension)
 * - Compiler Toolchain: GNU ARM Embedded Toolchain
 *
 * @section usage Usage
 * The project is well-documented using Doxygen. Inline comments are used extensively to provide detailed explanations of code functionality, usage, and limitations. The Doxygen-generated documentation provides an easy-to-navigate reference for all project components.
 *
 * @section acronyms Acronyms
 * - GPIO: General Purpose Input/Output
 * - DIO: Digital Input/Output
 *
*/
